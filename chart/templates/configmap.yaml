apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "finops-composition-definition-parser.fullname" . }}
  labels:
  {{- include "finops-composition-definition-parser.labels" . | nindent 4 }}
data:
  {{- range $key, $value := .Values.env }}
  {{ $key }}: {{ $value | quote }}
  {{- end }} 
  PORT_FINOPS_COMPOSITION_DEFINITION_PARSER: "{{ .Values.service.port }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notebook-scripts
  labels:
  {{- include "finops-composition-definition-parser.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
data:
  create-notebooks.sh: |-
    #!/bin/bash
    set -e
    
    git clone https://github.com/krateoplatformops/finops-database-handler.git
    cd finops-database-handler/notebook_samples
    
    export NAME=$(kubectl get databaseconfigs.finops.krateo.io -n $DATABASE_CONFIG_NAMESPACE $DATABASE_CONFIG_NAME -o jsonpath='{.spec.passwordSecretRef.name}')
    printf "database config name: %s\n" "$NAME"
    
    export PASSWORD=$(kubectl get -n $DATABASE_CONFIG_NAMESPACE secret $NAME -o jsonpath='{.data.password}')
    printf "database config password: %s\n" "$PASSWORD"
    
    PRICING_FRONTEND=$(echo $URL_DATABASE_HANDLER_PRICING_NOTEBOOK | sed 's/pricing_parser/pricing_frontend/')
    COSTS_FRONTEND=$(echo $URL_DATABASE_HANDLER_PRICING_NOTEBOOK | sed 's/pricing_parser/costs/')
    COSTSBREAKDOWN_FRONTEND=$(echo $URL_DATABASE_HANDLER_PRICING_NOTEBOOK | sed 's/pricing_parser/costsbreakdown/')
    METRICS_FRONTEND=$(echo $URL_DATABASE_HANDLER_PRICING_NOTEBOOK | sed 's/pricing_parser/metrics/')
    CYCLIC_OPTIMIZATION=$(echo $URL_DATABASE_HANDLER_PRICING_NOTEBOOK | sed 's/pricing_parser/cyclic/')

    printf "Pricing upload @ %s\n" "$URL_DATABASE_HANDLER_PRICING_NOTEBOOK/upload"
    printf "Frontend upload @ %s\n" "$PRICING_FRONTEND/upload"
    printf "Costs upload @ %s\n" "$COSTS_FRONTEND/upload"
    printf "Costs breakdown upload @ %s\n" "$COSTSBREAKDOWN_FRONTEND/upload"
    printf "Metrics upload @ %s\n" "$METRICS_FRONTEND/upload"
    printf "Cyclic Optimization upload @ %s\n" "$CYCLIC_OPTIMIZATION/upload"

    # Function to verify JSON response
    verify_response() {
        local response="$1"
        local expected='{"result":true}'
        
        if [ "$response" = "$expected" ]; then
            return 0
        else
            printf "Error: Expected %s but got %s\n" "$expected" "$response"
            return 1
        fi
    }

    # Function to make curl request with timeout and error handling
    make_curl_request() {
        local url="$1"
        local file="$2"
        local description="$3"
        
        # Set timeout to 60 seconds, follow redirects, show errors
        local response
        response=$(curl -s -S --connect-timeout 60 --max-time 60 -L \
                  -u "system:$PASSWORD" -X POST \
                  "$url" --data-binary "@$file" 2>&1)
        
        local curl_exit=$?
        
        # Check for curl errors
        case $curl_exit in
            0)
                # Success - verify the response
                verify_response "$response" || {
                    printf "Error: %s - Invalid response\n" "$description"
                    return 1
                }
                ;;
            6)
                printf "Error: %s - Could not resolve host\n" "$description"
                return 1
                ;;
            7)
                printf "Error: %s - Could not connect to host\n" "$description"
                return 1
                ;;
            28)
                printf "Error: %s - Operation timed out\n" "$description"
                return 1
                ;;
            *)
                printf "Error: %s - Curl failed with exit code %d: %s\n" "$description" "$curl_exit" "$response"
                return 1
                ;;
        esac
        
        printf "%s successful\n" "$description"
        return 0
    }

    # Actual uploads
    make_curl_request "$URL_DATABASE_HANDLER_PRICING_NOTEBOOK/upload" "pricing_parser.py" "Pricing parser upload" || exit 1
    make_curl_request "$PRICING_FRONTEND/upload" "pricing_frontend.py" "Frontend upload" || exit 1
    make_curl_request "$COSTS_FRONTEND/upload" "costs_frontend.py" "Costs upload" || exit 1
    make_curl_request "$COSTSBREAKDOWN_FRONTEND/upload" "costsbreakdown_frontend.py" "Costs breakdown upload" || exit 1
    make_curl_request "$METRICS_FRONTEND/upload" "metrics_frontend.py" "Metrics upload" || exit 1
    make_curl_request "$CYCLIC_OPTIMIZATION/upload" "cyclic.py" "Cyclic optimization upload" || exit 1